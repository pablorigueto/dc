<?php

use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeInterface;
use Drupal\user\Entity\User;

/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 *
 * Adds body classes if certain regions have content.
 */
function dc_theme_preprocess_html(&$variables) {

  // So fonts can be preloaded from base theme in the event Olivero is used as a subtheme.
  $variables['dc_theme_path'] = \Drupal::request()->getBasePath() . '/' . \Drupal::service('extension.list.theme')->getPath('dc_theme');
}

/**
 * Implements hook_page_attachments_alter().
 */
function dc_theme_page_attachments_alter(array &$attachments) {
  $attachments['#attached']['library'][] = 'dc_theme/react_app_main';
}

/**
 * Implements hook_preprocess_page().
 */
function dc_theme_preprocess_page(&$variables) {
  $variables['site_logo'] = theme_get_setting('logo.url');
  $variables['site_name'] = \Drupal::config('system.site')->get('name');
}

/**
 * Implements hook_form_alter().
 */
function dc_theme_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add placeholder to search form.
  if ($form_id === 'search_block_form') {
    // Add a placeholder to the search input field.
    $form['keys']['#attributes']['placeholder'] = t('Enter the terms you wish to search for.');
  }
}

/**
 * Implements template_preprocess_node().
 */
function dc_theme_preprocess_node(&$variables) {
  // Add some vars to get on twig."
  if ($variables['node']->getType() == 'page' || $variables['node']->getType() == 'article'
  ) {
    $node = $variables['node'];
    setInfosToGetOnTwig($node, $variables);
  }
}

// Get the image uri to render on search results.
function dc_theme_preprocess_search_result(&$variables) {
  $result = $variables['result'];
  $node = $result['node'];
  // Check if the node has an image attached.
  if ($node->bundle() === 'article' || $node->bundle() === 'page') {
    setInfosToSearchResultTwig($node, $variables);
  }
}

function setInfosToGetOnTwig($node, &$variables): void {
  setURI($node, $variables);
  $variables['image_title'] = $node->get('body')[0]->getValue()['value'] ?? "";
  $variables['revision_user_uri'] = getLastChangedByFromNode($node)['profile_picture_uri'] ?? "";
}

function setInfosToSearchResultTwig($node, &$variables): void {
  setURI($node, $variables);
  $formatted_date = formateDate($timestamp);
  $variables['create_or_changed'] = $formatted_date;
  $variables['node_type'] = $node->bundle();
  $variables['node_owner_or_changed'] = getOwnerFromNode($node) ?? "";
}

function setURI($node, &$variables) {
  $thumbnail_uri = $node->get('field_image')->entity->getFileUri() ?? "";
  $variables['thumbnail'] = [
    '#theme' => 'image',
    '#uri' => $thumbnail_uri,
    '#alt' => $node->get('field_image')->entity->alt,
  ];
  $variables['image_profile'] = getUserProfileImage($node->getOwner()->id()) ?? "";
}

function getOwnerFromNode($node) {
  $uid = $node->getOwner()->id();
  $owner = User::load($uid);
  return $owner->getAccountName();
}

function getLastChangedByFromNode(NodeInterface $node) {
  // Get the latest revision ID.
  $latest_revision_id = $node->getRevisionId();

  // Load the latest revision.
  $latest_revision = \Drupal::entityTypeManager()
    ->getStorage('node')
    ->loadRevision($latest_revision_id);

  // Get the user ID of the user who last changed the node.
  $changed_uid = $latest_revision->getRevisionUser()->id();
  // Load the user entity.
  $changed_by_load = User::load($changed_uid);

  $changed_by_user = $changed_by_load->getAccountName();

  $node_owner = getOwnerFromNode($node);

  $revision_user_profile = getUserProfileImage($changed_uid);

  if ($changed_by_user !== $node_owner) {

    return [
      'username' => $changed_by_user,
      'profile_picture_uri' => $revision_user_profile,
    ];

  }
  // When the node created user is the same that the edit.
  else {
    $created_date = formateDate($node->get('created')->getValue()[0]['value']);
    $last_revision_timestamp = $latest_revision->getChangedTime();
    $revision_date = formateDate($last_revision_timestamp);

    // When the node created date is the same that the edit.
    if ($created_date === $revision_date) {

      return '';

    }
    else {

      return [
        'username' => $changed_by_user,
        'profile_picture_uri' => $revision_user_profile,
      ];

    }

  }
}

function formateDate($timestamp) {
  $datetime = DrupalDateTime::createFromTimestamp($timestamp);
  return $datetime->format('d M y');
}

// function getLastRevision($node) {
//    // Check if the node has revisions.
//    if ($node instanceof NodeInterface && $node->isRevisionable()) {
//     // Get the latest revision ID.
//     $latest_revision_id = $node->get('revision_default')->value;

//     // Load the latest revision.
//     $latest_revision = \Drupal::entityTypeManager()
//       ->getStorage('node')
//       ->loadRevision($latest_revision_id);

//     // Get the timestamp of the latest revision.
//     $last_revision_timestamp = $latest_revision->getChangedTime();

//     $datetime = DrupalDateTime::createFromTimestamp($last_revision_timestamp);
//     $formatted_date = $datetime->format('d M y');
//     // Add the last revision timestamp to the node preprocess variables.
//     $formatted_date;
//   }
// }

function getUserProfileImage($uid) {
  // Load the user entity.
  $user = User::load($uid);

  // Check if the user has a profile image.
  if (!$user->hasField('user_picture') && $user->get('user_picture')->isEmpty()) {
    return '';
  }

  return $user->get('user_picture')->entity->getFileUri();

}

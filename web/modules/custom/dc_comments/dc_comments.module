<?php

/**
 * @file
 * Contains dc_comments.
 */

use Drupal\comment\CommentInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\user\Entity\User;

/**
 * Implements hook_page_attachments().
 */
function dc_comments_page_attachments(array &$attachments) {
  if (!\Drupal::service('router.admin_context')->isAdminRoute()) {
    $attachments['#attached']['library'][] = 'dc_comments/dc-comments-styling';
  }
}

function dc_comments_form_alter(&$form, &$form_state, $form_id) {

  // Change the comment field to plain text.
  if ($form_id == 'comment_comment_form') {
    // Add a class to the submit button.
    // $form['actions']['submit']['#prefix'] = '<i class="fa-regular fa-paper-plane"></i>';
    // $form['actions']['submit']['#attributes']['class'][] = 'fa-regular fa-paper-plane';
    $form['actions']['submit']['#attributes']['id'] = 'send-comment';
    $form['actions']['submit']['#value'] = t('Send');

    $form['comment_body']['widget'][0]['#format'] = 'plain_text';
    $form['comment_body']['widget'][0]['#allowed_formats'] = ['plain_text'];
    $form['comment_body']['widget'][0]['#rows'] = 1;

    unset($form['actions']['preview']);

    // This line enables the Enter key to add a new line in the comment field.
    $form['comment_body']['widget'][0]['#input'] = TRUE;
    // Each time that the user hits Enter one line is add.
    $form['comment_body']['widget'][0]['#attributes']['onkeydown'] = 'if(event.keyCode==13){this.rows += 1;}';

    $form['comment_body']['#weight'] = -10;

    // Add a validation function to check if the textarea is empty.
    $form['#validate'][] = '_dc_comments_form_validate';
  }

}

function _dc_comments_form_validate($form, &$form_state) {
  $comment_body = $form_state->getValue('comment_body')[0]['value'];
  if (empty($comment_body)) {
    $form_state->setErrorByName('comment_body', t('Please enter a comment before to send.'));
  }
}

/**
 * Implements hook_ENTITY_TYPE_access() for comment entity type.
 */
function dc_comments_comment_access(CommentInterface $comment, $op, AccountInterface $account) {
  if ($op == 'delete' && $comment->getOwnerId() == $account->id()) {
    return AccessResult::allowedIfHasPermission($account, 'delete own comments');
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_comment_view_alter to add the author's name on reply.
*/
function dc_comments_comment_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {

  $comment = $build['#comment'];

  if ($entity->getEntityTypeId() === 'comment' && isset($build['#comment'])) {
    // Check if this is a reply comment.
    if ($comment->getParentComment()) {
      // Get the parent comment.
      $parent_comment = $comment->getParentComment();

      // Load the author of the parent comment.
      $parent_author = User::load($parent_comment->getOwnerId());

      // Build the reply information.
      $buildReply = [
        '#markup' => '<div class="parent-comment-info">' .
                     '<div class="reply-text">' . t('reply: ') . '</div>' .
                     '<div class="username-info">' . $parent_author->getDisplayName() . '</div>' .
                     '</div>',
      ];

      // Add author's name on reply.
      array_unshift($build['comment_body'], $buildReply);

    }
  }

  // Check if the comment has been edited and add an element to indicated on twig.
  if ($comment->getChangedTime() != $comment->getCreatedTime()) {

    // Create a DrupalDateTime object from the change timestamp of the comment.
    // $formatted_time = _format_date($comment->getChangedTime());
    // $modifiedText = t('edited');
    // $build['comment_body']['#suffix'] = '<div class="comment-edit">' . $modifiedText . ': ' . $formatted_time . '</div>';
    // Add an "EDIT" message to the comment body.
    $build['comment_body']['#suffix'] = '';
  }

}

/**
 * Implements hook_preprocess_HOOK() for block templates.
 */
function dc_comments_preprocess_comment(&$variables) {

  if ($variables['comment']->hasField('changed')) {
    $timestamp = $variables['comment']->getChangedTime();

    // // Get the comment entity.
    // $test = $variables['comment']->get('comment_body')->value;
    // $formatted_date = _format_date($timestamp);
    // $test;

  }
  else {
    // Get the timestamp of the comment creation.
    $timestamp = $variables['comment']->getCreatedTime();
  }

  // Format the change time into the desired pattern.
  $formatted_date = _format_date($timestamp);

  // Add the formatted date to the variables array.
  $variables['formatted_date'] = $formatted_date;
}

/*
*
*/
function _format_date($timestamp) {
  // $time = DrupalDateTime::createFromTimestamp($timestamp);
  // // Format the created and change time into the desired pattern.
  // return $time->format('D, M/d/Y - H:i');

  // Create a DrupalDateTime object for the provided timestamp.
  $time = DrupalDateTime::createFromTimestamp($timestamp);
  $current_time = new DrupalDateTime();

  $interval = $current_time->diff($time);
  $formatted_date = '';

  // Calculate the total number of days and remaining hours.
  $days = $interval->days;
  $hours = $interval->h;
  $minutes = $interval->i;

  // Format the output.
  if ($days > 0) {
    $formatted_date .= $days . ' day' . ($days > 1 ? 's' : '') . ' ago';
  }

  // if ($hours > 0) {
  //   if ($formatted_date !== '') {
  //     $formatted_date .= ' and ';
  //   }
  //   $formatted_date .= $hours . ' hour' . ($hours > 1 ? 's' : '') . ' ago';
  // }

  // If the time difference is less than 24 hours, use a different format.
  if ($interval->days === 0 && $interval->h < 24) {
    $formatted_date = $hours . ' hours ago';
    if ($interval->h === 0) {
      $formatted_date = $minutes . ' min ago';
    }
  }

  return $formatted_date;

}

/*
*
*/
function dc_comments_preprocess_page(&$variables) {
  if (!_dc_comments_comment_path()) {
    unset($variables['page']['breadcrumb']);
  }
}

// Check if is comment path.
function _dc_comments_comment_path() {
  $current_path = \Drupal::service('path.current')->getPath();

  $comment_start = str_starts_with($current_path, "/comment/");
  $comment_edit = str_ends_with($current_path, "/edit");
  $comment_delete = str_ends_with($current_path, "/delete");

  if ($comment_start && ($comment_edit || $comment_delete)) {
    return TRUE;
  }

  return FALSE;
}

function dc_comments_entity_load($entities, $entity_type_id) {

  if (_dc_comments_comment_path() && $entity_type_id === 'comment') {

    foreach ($entities as $comment_entity) {
      // Check if the comment has been edited.
      $changed_time = $comment_entity->getChangedTime();
      $created_time = $comment_entity->getCreatedTime();
      $is_edited = ($changed_time > $created_time);

      if ($is_edited) {
        // Get the comment body.
        $comment_body = $comment_entity->get('comment_body')->value;

        $comment_output = [
          '#type' => 'html_tag',
          '#tag' => 'div',
          '#attributes' => [
            'class' => 'comment_edit',
            'style' => 'visibility: hidden;'
          ],
          '#value' => $comment_body,
        ];
        $comment_render = \Drupal::service('renderer')->renderRoot($comment_output);
        // Output the rendered comment body.
        print $comment_render;

      }
    }
  }
}
